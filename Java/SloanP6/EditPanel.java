/* Laurence Mirabal
 * MirabalP8 Database
 * lmirabal3@cnm.edu
 * EditPanel.java
 * 12/1/2011
*/
package mirabalp8;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
/**
 *
 * @author Laurence PC
 */
public class EditPanel extends javax.swing.JPanel {
    //call dbmanager
    private DBManager dbm;
    //create list array for the jlist box
    private String[] list;
    //put the list into a record array to display
    private String[] rec;
    //my variables in my table
    private String cName, model, megapix, price;
    private int UID;

    /** Creates new form EditPanel */
    public EditPanel(DBManager db) {
        dbm = db; 
        initComponents();

        try
        {
            jTextFieldCName.setEnabled(false);
            jTextFieldModel.setEnabled(false);
            jTextFieldMP.setEnabled(false);
            jTextFieldPrice.setEnabled(false);
            list = dbm.getList();
        }
        catch(SQLException ex)
        {//catch exception
         Logger.getLogger(EditPanel.class.getName()).log(Level.SEVERE,null,ex);
        }
        //creates list for jlist box
        DefaultListModel listModel = new DefaultListModel();
        for(int i =0; i < list.length; i++)
        {
            listModel.addElement(list[i]);
        }
        //fill list into jlist box
        jList1.setListData(list);
    }

    public void reloadList()
    {
        try {
            list = dbm.getList();
        }
        catch (SQLException ex)
        {//catch exception
            Logger.getLogger(EditPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        //refresh list
        DefaultListModel listModel = new DefaultListModel();
        for(int i = 0; i < list.length; i++)
        {
            listModel.addElement(list[i]);
        }
        //send update to nlist box
        jList1.setListData(list);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldCName = new javax.swing.JTextField();
        jTextFieldModel = new javax.swing.JTextField();
        jTextFieldMP = new javax.swing.JTextField();
        jTextFieldPrice = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jCheckBoxCName = new javax.swing.JCheckBox();
        jCheckBoxModel = new javax.swing.JCheckBox();
        jCheckBoxMP = new javax.swing.JCheckBox();
        jCheckBoxPrice = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Edit Record", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        setPreferredSize(new java.awt.Dimension(189, 480));

        jButton1.setText("Submit Changes");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jCheckBoxCName.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxCNameStateChanged(evt);
            }
        });

        jCheckBoxModel.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxModelStateChanged(evt);
            }
        });

        jCheckBoxMP.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxMPStateChanged(evt);
            }
        });

        jCheckBoxPrice.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxPriceStateChanged(evt);
            }
        });

        jLabel2.setText("Manufacturer");

        jLabel3.setText("Model  #");

        jLabel4.setText("Megapixels");

        jLabel5.setText("Price  $ ");

        jButton2.setText("Refresh List");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCheckBoxPrice)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jCheckBoxCName)
                                .addComponent(jCheckBoxModel))
                            .addComponent(jCheckBoxMP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextFieldMP)
                            .addComponent(jTextFieldPrice)
                            .addComponent(jTextFieldCName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldModel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(58, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2)
                            .addComponent(jButton1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBoxCName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBoxModel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxPrice)
                            .addComponent(jLabel4))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxMP)
                            .addComponent(jLabel5)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldCName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldMP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(118, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        // TODO add your handling code here:
         try
        {
        if(!evt.getValueIsAdjusting())
        {
            int[] IDs;
            try
            {
                IDs = dbm.getIDs();
            }
            catch (SQLException ex)
            {//catch exception
        Logger.getLogger(EditPanel.class.getName()).log(Level.SEVERE,null,ex);
                IDs = new int[0];
            }
            //create an index for a selected record to edit
            int index = jList1.getSelectedIndex();
            //load the index number into UID array
            UID = IDs[index];
            //find the seleced UID
            try
            {
                rec = dbm.getRecord(UID);
            }
            catch (SQLException ex)
            {//catch exception
          Logger.getLogger(EditPanel.class.getName()).log(Level.SEVERE,null,ex);
                 rec = new String[0];
            }
            //edit information in list
            cName = rec[1];  jTextFieldCName.setText(cName);
            model = rec[2];  jTextFieldModel.setText(model);
            megapix = rec[3]; jTextFieldMP.setText(megapix);
            price = rec[4]; jTextFieldPrice.setText(price);
           }
         }
        catch(Exception e)
         {//catch exception
     Logger.getLogger(DeletePanel.class.getName()).log(Level.SEVERE, null, e);
         }
    }//GEN-LAST:event_jList1ValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //specify table name and sql commands to run
        String tableName = "Cameras";
        String setCriteria = "";
        String whereClause = "UID =" + UID + ";";
        boolean err = false;

        //check the checkboxes and make changes.
        if(jCheckBoxCName.isSelected())
        {
            setCriteria = "Company = '" + jTextFieldCName.getText() + "'";
        }
        if(jCheckBoxModel.isSelected())
        {
            setCriteria += ", Model = '" + jTextFieldModel.getText() + "'";
        }
        if(jCheckBoxMP.isSelected())
        {
            //This is also price and not MP.. Some strange return in the
            //output..
            setCriteria += ", Price = '" + jTextFieldMP.getText() + "'";
        }
        if(jCheckBoxPrice.isSelected())
        {
            //I dont know why but this has to be mp instead of price..
            setCriteria += ", Megapixels = '" + jTextFieldPrice.getText() + "'";
        }

        if(setCriteria.equals("")){
            err = true;
            JOptionPane.showMessageDialog(null,
                    "Plese Check a Box to Make Changes!",
                    "User Error", JOptionPane.ERROR_MESSAGE);
        }
        //check past the first check box..
        if(!err){
            if(!jCheckBoxCName.isSelected())
            {
                int l = setCriteria.length();
                setCriteria = setCriteria.substring(2,l);
            }
            err = nullCheck();
            if(!err)
            {
                try
                {
                    dbm.edit(tableName, setCriteria, whereClause);
                } 
                catch (SQLException ex)
                {//catch exception
                 Logger.getLogger(EditPanel.class.getName()).log(Level.SEVERE,
                        null, ex);
                }
                clear();
                reloadList();
                try
                {
                    rec = dbm.getRecord(UID);
                }
                catch (SQLException ex)
                {//catch exception
                    Logger.getLogger(EditPanel.class.getName()).log(
                           Level.SEVERE,null,ex);
                    rec = new String[0];
                }
            //same as other method
            cName = rec[1];  jTextFieldCName.setText(cName);
            model = rec[2];  jTextFieldModel.setText(model);
            megapix = rec[3]; jTextFieldMP.setText(megapix);
            price = rec[4]; jTextFieldPrice.setText(price);
            }
            else{
                JOptionPane.showMessageDialog(null,
                        "You must fill in all of your checked items!",
                        "User Error", JOptionPane.ERROR_MESSAGE);
            }}
    }//GEN-LAST:event_jButton1ActionPerformed
//
//the following 4 methods are for the check boxes
//
    private void jCheckBoxCNameStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxCNameStateChanged
        // TODO add your handling code here:
        if (jCheckBoxCName.isSelected()){
            jTextFieldCName.setEnabled(true);
        }
        else
            jTextFieldCName.setEnabled(false);
    }//GEN-LAST:event_jCheckBoxCNameStateChanged

    private void jCheckBoxModelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxModelStateChanged
        // TODO add your handling code here:
         if (jCheckBoxModel.isSelected()){
            jTextFieldModel.setEnabled(true);
        }
        else
            jTextFieldModel.setEnabled(false);
    }//GEN-LAST:event_jCheckBoxModelStateChanged

    private void jCheckBoxMPStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxMPStateChanged
        // TODO add your handling code here:
         if (jCheckBoxMP.isSelected()){
            jTextFieldMP.setEnabled(true);
        }
        else
            jTextFieldMP.setEnabled(false);
    }//GEN-LAST:event_jCheckBoxMPStateChanged

    private void jCheckBoxPriceStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxPriceStateChanged
        // TODO add your handling code here:
        if (jCheckBoxPrice.isSelected()){
            jTextFieldPrice.setEnabled(true);
        }
        else
            jTextFieldPrice.setEnabled(false);
    }//GEN-LAST:event_jCheckBoxPriceStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //refresh button
        reloadList();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void clear()
    {//clear fields after button is pressed
        jTextFieldCName.setText("");
        jTextFieldModel.setText("");
        jTextFieldMP.setText("");
        jTextFieldPrice.setText("");
        cName = "";
        model = "";
        megapix = "";
        price = "";
    }

    private boolean nullCheck()
    {
        //check to see if the fields are valid
        boolean err = false;

        if(jCheckBoxCName.isSelected() && jTextFieldCName.getText().isEmpty()){
            err = true;
        }
        if(jCheckBoxModel.isSelected() && jTextFieldModel.getText().isEmpty()){
            err = true;
        }
        if(jCheckBoxMP.isSelected() && jTextFieldMP.getText().isEmpty()){
            err = true;
        }
        if(jCheckBoxPrice.isSelected() && jTextFieldPrice.getText().isEmpty()){
            err = true;
        }
        return err;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBoxCName;
    private javax.swing.JCheckBox jCheckBoxMP;
    private javax.swing.JCheckBox jCheckBoxModel;
    private javax.swing.JCheckBox jCheckBoxPrice;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldCName;
    private javax.swing.JTextField jTextFieldMP;
    private javax.swing.JTextField jTextFieldModel;
    private javax.swing.JTextField jTextFieldPrice;
    // End of variables declaration//GEN-END:variables

}